AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: 'AWS CloudFormation to launch foundations for a HPC cluster'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceTypeMaster:
    Description: Master node Instance Type
    Type: String
    Default: r5d.12xlarge
    ConstraintDescription: Designated R5d.12Xlarge as the master node.
  InstanceTypeNode:
    Description: Worker Node Instance Type
    Type: String
    Default: r5d.4xlarge
    ConstraintDescription: Designated R5d.4Xlarge as the worker node.
  InstanceTypeClient:
    Description: Client Instance Type
    Type: String
    Default: t3.2xlarge
    ConstraintDescription: Designated T3.2xlarge as the client node.
  InstanceTypeNFS:
    Description: NFS Server Instance Type
    Type: String
    Default: m5.2xlarge
    ConstraintDescription: Designated M5.2Xlarge as the NFS Server.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet in your
      Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private
      Cloud.
  SSHLocation:
    Description: The IP address range that can be used to SSH and RDP to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  NFSServerLocation:
    Description: The IP address range that can access the NFS server. Likely the CIDR block of the VPC this is being launched in.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  WorkerNodeClusterLocation:
    Description: The IP address range that will have common cluster communication ports. 
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AMIIDMaster:
    Description: AMI ID to be used as the base operating system for the Master node (default is Red Hat Enterprise Linux (RHEL) 7.5)
    Type: String
    Default: ami-67589505
    ConstraintDescription: Must be the name of an AMI ID such as ami-1234567
  AMIIDNode:
    Description: AMI ID to be used as the base operating system for the worker nodes (default is Red Hat Enterprise Linux (RHEL) 7.5)
    Type: String
    Default: ami-67589505
    ConstraintDescription: Must be the name of an AMI ID such as ami-1234567
  AMIIDClient:
    Description: AMI ID to be used as the base operating system for the test client  (should be Windows server 2012)
    Type: String
    Default: ami-0ae223b3f00a02cba
    ConstraintDescription: Must be the name of an AMI ID such as ami-1234567
  AMIIDNFS:
    Description: AMI ID to be used as the base operating system for the NFS server (default is Red Hat Enterprise Linux (RHEL) 7.5)
    Type: String
    Default: ami-67589505
    ConstraintDescription: Must be the name of an AMI ID such as ami-1234567

Resources:

  PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
   
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupName: SSH and RDP access for HPC CLuster POC
      GroupDescription: Enable SSH access via port 22 and RDP via 3389
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: !Ref 'SSHLocation'
  
  NFSServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupName: NFS server ports
      GroupDescription: Enable NFS server host ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: !Ref 'NFSServerLocation'
      - IpProtocol: udp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: !Ref 'NFSServerLocation'
      - IpProtocol: tcp
        FromPort: '111'
        ToPort: '111'
        CidrIp: !Ref 'NFSServerLocation'
      - IpProtocol: udp
        FromPort: '111'
        ToPort: '111'
        CidrIp: !Ref 'NFSServerLocation'
  
  WorkerNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupName: Shared worked node cluster ports
      GroupDescription: Shared worked node cluster ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '11525'
        ToPort: '11525'
        CidrIp: !Ref 'WorkerNodeClusterLocation'
      - IpProtocol: tcp
        FromPort: '3006'
        ToPort: '3006'
        CidrIp: !Ref 'WorkerNodeClusterLocation'
      - IpProtocol: udp
        FromPort: '3006'
        ToPort: '3006'
        CidrIp: !Ref 'WorkerNodeClusterLocation'


  EC2InstanceMaster:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDMaster'
      InstanceType: !Ref 'InstanceTypeMaster'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'NFSServerSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Master Node'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup

  EC2InstanceNode1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 1'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup
 
  EC2InstanceNode2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 2'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup
  
  EC2InstanceNode3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 3'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup
  
  EC2InstanceNode4:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 4'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup
 
  EC2InstanceNode5:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 5'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup
 
  EC2InstanceNode6:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 6'
      BlockDeviceMappings:
      -
       DeviceName: /dev/sda1
       Ebs:
         VolumeSize: 50
    DependsOn: PlacementGroup
   
  EC2InstanceNode7:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 7'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup
 
  EC2InstanceNode8:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 8'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup

  EC2InstanceNode9:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 8'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup

  EC2InstanceNode10:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNode'
      InstanceType: !Ref 'InstanceTypeNode'
      KeyName: !Ref 'KeyName'
      PlacementGroupName: !Ref 'PlacementGroup'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'Worker Node 8'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
    DependsOn: PlacementGroup

  EC2InstanceClient:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDClient'
      InstanceType: !Ref 'InstanceTypeClient'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'WorkerNodeSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      ElasticGpuSpecifications: [Type: 'eg1.medium']
      Tags:
      - Key: Name
        Value: Client
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 100

  EC2InstanceNFS:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AMIIDNFS'
      InstanceType: !Ref 'InstanceTypeNFS'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: [!Ref 'SSHSecurityGroup',!Ref 'NFSServerSecurityGroup']
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: 'NFS Server'
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
      -
        DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 1000
  
Outputs:
  MasterNode:
    Value: !Ref 'EC2InstanceMaster'
    Description: Instance Id of newly created instance
  WorkerNode1:
    Value: !Ref 'EC2InstanceNode1'
    Description: The instance ID of worker node 1
  WorkerNode2:
    Value: !Ref 'EC2InstanceNode2'
    Description: The instance ID of worker node 2
  WorkerNode3:
    Value: !Ref 'EC2InstanceNode3'
    Description: The instance ID of worker node 3
  WorkerNode4:
    Value: !Ref 'EC2InstanceNode4'
    Description: The instance ID of worker node 4
  WorkerNode5:
    Value: !Ref 'EC2InstanceNode5'
    Description: The instance ID of worker node 5  
  WorkerNode6:
    Value: !Ref 'EC2InstanceNode6'
    Description: The instance ID of worker node 6 
  WorkerNode7:
    Value: !Ref 'EC2InstanceNode7'
    Description: The instance ID of worker node 7 
  WorkerNode8:
    Value: !Ref 'EC2InstanceNode8'
    Description: The instance ID of worker node 8 
  WorkerNode9:
    Value: !Ref 'EC2InstanceNode9'
    Description: The instance ID of worker node 9 
  WorkerNode10:
    Value: !Ref 'EC2InstanceNode10'
    Description: The instance ID of worker node 10
  NFSServer:
    Value: !Ref 'EC2InstanceNFS'
    Description: The instance ID of the NFS Server
    Value: !Ref 'EC2InstanceClient'
    Description: The instance ID of the Windows client       